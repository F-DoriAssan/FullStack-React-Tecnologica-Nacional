{"ast":null,"code":"var isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] iIPv6 localhost .\nwindow.location.hostname === '[::1]' || // 127.0.0.0/8 localhost por IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // El constructor de URL está disponible en todos los navegadores que admiten SW.\n    var publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Nuestro trabajador de servicio no funcionará si PUBLIC_URL está en un origen diferente\n      // del que se muestra nuestra página. Esto podría suceder si se utiliza una CDN para \n      // servir activos; consulte https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', function () {\n      var swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n\n      if (isLocalhost) {\n        // Esto se ejecuta en localhost. Comprobemos si todavía existe un trabajador de servicio o no.\n        checkValidServiceWorker(swUrl, config); // Agregue algunos registros adicionales a localhost, indicando a los desarrolladores la \n        // documentación del trabajador del servicio/PWA.\n\n        navigator.serviceWorker.ready.then(function () {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // No es localhost. Simplemente registre al trabajador del servicio\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // En este punto, se ha obtenido el contenido actualizado en caché, \n            // pero el trabajador de servicio anterior seguirá entregando el contenido \n            // anterior hasta que se cierren todas las pestañas del cliente.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // En este punto, todo ha sido almacenado en caché. \n            // Es el momento perfecto para mostrar un \n            // \"El contenido está almacenado en caché para su uso sin conexión\". mensaje.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Compruebe si se puede encontrar al trabajador del servicio. Si no puede recargar la página.\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(function (response) {\n    // Asegúrese de que exista el trabajador del servicio y de que realmente estemos obteniendo un archivo JS.\n    var contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      /// No se encontró ningún trabajador de servicio. Probablemente una aplicación diferente. Vuelva a cargar la página.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Trabajador de servicio encontrado. Proceda normalmente.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    }).catch(function (error) {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"sources":["/home/doriass/Público/UTNBA-React/trabajopractico03-react/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"mappings":"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","sourcesContent":["const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] iIPv6 localhost .\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 localhost por IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // El constructor de URL está disponible en todos los navegadores que admiten SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n    // Nuestro trabajador de servicio no funcionará si PUBLIC_URL está en un origen diferente\n    // del que se muestra nuestra página. Esto podría suceder si se utiliza una CDN para \n    // servir activos; consulte https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // Esto se ejecuta en localhost. Comprobemos si todavía existe un trabajador de servicio o no.\n        checkValidServiceWorker(swUrl, config);\n\n        // Agregue algunos registros adicionales a localhost, indicando a los desarrolladores la \n        // documentación del trabajador del servicio/PWA.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // No es localhost. Simplemente registre al trabajador del servicio\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n          // En este punto, se ha obtenido el contenido actualizado en caché, \n          // pero el trabajador de servicio anterior seguirá entregando el contenido \n          // anterior hasta que se cierren todas las pestañas del cliente.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n            // En este punto, todo ha sido almacenado en caché. \n            // Es el momento perfecto para mostrar un \n            // \"El contenido está almacenado en caché para su uso sin conexión\". mensaje.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Compruebe si se puede encontrar al trabajador del servicio. Si no puede recargar la página.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Asegúrese de que exista el trabajador del servicio y de que realmente estemos obteniendo un archivo JS.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        /// No se encontró ningún trabajador de servicio. Probablemente una aplicación diferente. Vuelva a cargar la página.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Trabajador de servicio encontrado. Proceda normalmente.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}